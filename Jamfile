import testing ;
import os ;
import common ;
import toolset ;
import feature ;
import builtin ;
import property-set ;

rule suppress-warnings ( properties * )
{
    local vc-ver = [
        MATCH "^<toolset-msvc:version>([0-9]+)[.]" : $(properties)
    ] ;
    if $(vc-ver) && $(vc-ver) >= 8
    {
        return <cxxflags>-wd4819 <cxxflags>-wd4996 ;
    }
}

rule select-platform-obj ( properties * )
{
    switch [ feature.get-values target-os : $(properties) ]
    {
        case cygwin : { return <source>compat/cygwin.cc ; }
        case windows : { return <source>compat/mingw.cc ; }
    }
}

project mgit
    : requirements
      <toolset>msvc:<target-os>windows
      <toolset>gcc:<cxxflags>-Wno-long-long
      <toolset>gcc,<toolset-gcc:flavor>mingw:<target-os>windows
      <toolset>gcc,<toolset-gcc:flavor>cygwin:<target-os>cygwin
      <toolset>gcc,<address-model>64:<link>static
      <toolset>gcc,<address-model>64:<runtime-link>static
      <link>shared:<define>BOOST_TEST_DYN_LINK=1
      <target-os>cygwin:<linkflags>-liconv
      <library>/boost//headers
      <conditional>@suppress-warnings
      <define>BOOST_ALL_NO_LIB=1
      <include>.
    : usage-requirements
      <define>BOOST_TEST_NO_AUTO_LINK=1
    : build-dir bin
    : default-build
      <address-model>32
    ;	


lib gitobjs
    :
    [ GLOB . : *.cc ]
    :
	<conditional>@select-platform-obj
    <link>static
    :
    ;

local test_sources = [ GLOB testsuite : *.cc ] ;
local test_names = $(test_sources:B) ;
for name in $(test_names)
{
    run testsuite/$(name).cc
        gitobjs
        :
        :
        :
        <library>/boost/system//boost_system
        <library>/boost/test//boost_unit_test_framework
        :
        $(name)
        ;
    explicit $(name) ;
}

alias test : $(test_names) ;
